# This file contains the ADO job that build libonnxruntime.so on Linux
parameters:
- name: AdditionalBuildFlags
  displayName: Additional build flags for build.py
  type: string
  default: ''

- name: BaseImage
  type: string

- name: OnnxruntimeArch
  type: string

- name: OnnxruntimeNodejsBindingArch
  type: string
  values:
  - arm64
  - x64

- name: PoolName
  type: string
  default: 'onnxruntime-Ubuntu2204-AMD-CPU'

- name: ArtifactNamePrefix
  type: string
  default: "onnxruntime"

- name: PackageJava
  type: boolean
  default: true

- name: PackageNodejs
  type: boolean
  default: true

jobs:
- job: Linux_C_API_Packaging_CPU_${{parameters.OnnxruntimeArch}}

  workspace:
    clean: all
  timeoutInMinutes:  210
  pool:
    name: ${{parameters.PoolName}}
    demands:
        - ImageVersionOverride -equals 6.0.0
  steps:
    - checkout: self
      clean: true
      submodules: none

    - task: AzureKeyVault@2
      displayName: KYLE - Test Azure Key Vault
      inputs:
        azureSubscription: 'OnnxrunTimeCodeSign_20240611'
        KeyVaultName: 'ort-release'
        SecretsFilter: 'java-pgp-pwd,java-pgp-key'
        RunAsPreJob: false

    - script: |
        #!/bin/bash
        working_directory=$(Build.BinariesDirectory)
        original_private_key=$(java-pgp-key)
        original_passphrase=$(java-pgp-pwd)

        #working_directory=$(pwd)
        #original_private_key=$GPG_KEY
        #original_passphrase=$GPG_PWD

        size_of_private_key=${#original_private_key}
        size_of_passphrase=${#original_passphrase}
        echo "Size of private key: $size_of_private_key"
        echo "Size of passphrase: $size_of_passphrase"

        echo "Verifying GPG installation"
        gpg --version

        jar_files_directory=$working_directory/debugging_target_folder
        mkdir -p $jar_files_directory
        echo "this is a testing jar file." >$jar_files_directory/testing.jar

        printf "%s" "$original_private_key" >$working_directory/private_key.txt
        printf "%s" "$original_passphrase" >$working_directory/passphrase.txt

        readarray -t private_key_array < $working_directory/private_key.txt
        readarray -t passphrase_array < $working_directory/passphrase.txt
        echo "private key length: ${#private_key_array[@]}"
        echo "passphrase length: ${#passphrase_array[@]}"

        echo "Importing GPG key"
        gpg --batch --import $working_directory/private_key.txt
        echo "Importing GPG key done"

        echo "Signing jar file"
        gpg --pinentry-mode loopback --passphrase-file $working_directory/passphrase.txt -ab $jar_files_directory/testing.jar
        echo "Signing jar file done"

        echo "generating checksum sha256"
        sha256sum $jar_files_directory/testing.jar | awk '{print $1}' >$jar_files_directory/testing.jar.sha256
      workingDirectory: $(Build.BinariesDirectory)
      displayName: 'KYLE - Test Signing'

    - task: PublishPipelineArtifact@1
      displayName: 'KYLE - Debugging Artifact'
      inputs:
        targetPath: '$(Build.BinariesDirectory)/debugging_target_folder'
        artifact: 'debugging_target_folder'

    - task: CmdLine@2
      inputs:
        script: |
          exit 1
        workingDirectory: $(Build.BinariesDirectory)
      displayName: 'KYLE - End pipeline'

    - template: set-version-number-variables-step.yml
    - ${{ if eq(parameters.OnnxruntimeArch, 'x64') }}:
      - template: get-docker-image-steps.yml
        parameters:
          Dockerfile: tools/ci_build/github/linux/docker/inference/x86_64/default/cpu/Dockerfile
          Context: tools/ci_build/github/linux/docker/inference/x86_64/default/cpu
          DockerBuildArgs: "--build-arg BUILD_UID=$( id -u ) --build-arg BASEIMAGE=${{parameters.BaseImage}}"
          Repository: onnxruntimecpubuildcentos8${{parameters.OnnxruntimeArch}}_packaging

    - ${{ if eq(parameters.OnnxruntimeArch, 'aarch64') }}:
      - template: get-docker-image-steps.yml
        parameters:
          Dockerfile: tools/ci_build/github/linux/docker/inference/aarch64/default/cpu/Dockerfile
          Context: tools/ci_build/github/linux/docker/inference/aarch64/default/cpu
          DockerBuildArgs: "--build-arg BUILD_UID=$( id -u ) --build-arg BASEIMAGE=${{parameters.BaseImage}}"
          Repository: onnxruntimecpubuildcentos8${{parameters.OnnxruntimeArch}}_packaging
          UpdateDepsTxt: false

    - task: CmdLine@2
      inputs:
        script: |
          mkdir -p $HOME/.onnx
          docker run --rm --volume /data/onnx:/data/onnx:ro --volume $(Build.SourcesDirectory):/onnxruntime_src --volume $(Build.BinariesDirectory):/build \
          --volume $HOME/.onnx:/home/onnxruntimedev/.onnx -e NIGHTLY_BUILD onnxruntimecpubuildcentos8${{parameters.OnnxruntimeArch}}_packaging /bin/bash -c "python3.9 \
          /onnxruntime_src/tools/ci_build/build.py --enable_lto --build_java --build_nodejs --build_dir /build --config Release \
          --skip_submodule_sync --parallel --use_binskim_compliant_compile_flags --build_shared_lib ${{ parameters.AdditionalBuildFlags }} && cd /build/Release && make install DESTDIR=/build/installed"
        workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Build'

    - script: |
       set -e -x
       mkdir $(Build.ArtifactStagingDirectory)/testdata
       cp $(Build.BinariesDirectory)/Release/libcustom_op_library.so* $(Build.ArtifactStagingDirectory)/testdata
       ls -al $(Build.ArtifactStagingDirectory)
      displayName: 'Create Artifacts'

    - ${{ if eq(parameters.PackageJava, 'true') }}:
      - template: java-api-artifacts-package-and-publish-steps-posix.yml
        parameters:
          arch: 'linux-${{parameters.OnnxruntimeArch}}'
          buildConfig: 'Release'
          artifactName: 'onnxruntime-java-linux-${{parameters.OnnxruntimeArch}}'
          version: '$(OnnxRuntimeVersion)'
          libraryName: 'libonnxruntime.so'
          nativeLibraryName: 'libonnxruntime4j_jni.so'

    - template: c-api-artifacts-package-and-publish-steps-posix.yml
      parameters:
          buildConfig: 'Release'
          artifactName: '${{parameters.ArtifactNamePrefix}}-linux-${{parameters.OnnxruntimeArch}}-$(OnnxRuntimeVersion)'
          artifactNameNoVersionString: '${{parameters.ArtifactNamePrefix}}-linux-${{parameters.OnnxruntimeArch}}'
          libraryName: 'libonnxruntime.so.$(OnnxRuntimeVersion)'

    - ${{ if eq(parameters.PackageNodejs, 'true') }}:
      - template: nodejs-artifacts-package-and-publish-steps-posix.yml
        parameters:
          arch: '${{parameters.OnnxruntimeNodejsBindingArch}}'
          os: 'linux'
          artifactName: 'drop-onnxruntime-nodejs-linux-${{parameters.OnnxruntimeArch}}'

    - ${{ if not(eq(parameters.OnnxruntimeNodejsBindingArch, 'arm64')) }}:
      - template: component-governance-component-detection-steps.yml
        parameters:
          condition: 'succeeded'
    - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
      displayName: 'Clean Agent Directories'
      condition: always()
